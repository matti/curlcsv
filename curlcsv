#!/usr/bin/env bash
set -euo pipefail

shutdown=no

_term() {
  >&2 echo "TERM"
  exit 0
}
_int() {
  sleep 1

  kill $(jobs -p) >/dev/null 2>&1 || true
  wait $(jobs -p) >/dev/null 2>&1 || true

  pbcopy < "$csv"

  echo ""
  echo ""
  echo "$csv"
  exit 0
}

trap "_term" TERM
trap "_int" INT
_err() {
  >&2 echo "err: $*"
  exit 1
}
for arg in $@; do
  case "${arg}" in
    --parallel|-p)
      shift
      parallel=$1
      shift
    ;;
    --delay|-d)
      shift
      delay=$1
      shift
    ;;
    --cachebuster|-cb)
      shift
      cachebuster=yes
    ;;
  esac
done

[ "${parallel:-}" = "" ] && parallel=1
[ "${delay:-}" = "" ] && delay=0
[ "${cachebuster:-}" = "" ] && cachebuster=no

url=$1
started_at=$(date +%Y-%m-%d-%H-%M-%S)
csv="/tmp/curlcsv-$started_at.csv"

printf "date\ttook\tcode\tworker\n" | tee -a "$csv"
for worker in $(seq 1 $parallel); do
  (
    while true; do
      [ "$shutdown" = "yes" ] && break
      [ "$delay" != 0 ] && sleep $delay

      if [ "$cachebuster" = "yes" ]; then
        query_string="cachebuster=${RANDOM}${RANDOM}${RANDOM}"
        target_url="${url}?${query_string}"
      else
        target_url="${url}"
      fi

      now_seconds=$SECONDS
      now=$(date '+%Y-%m-%d %H:%M:%S')
      set +e
        line=$(curl -L -s -o /dev/null -w "%{time_starttransfer};%{http_code}\n" "$target_url")
        curl_status=$?
      set -e
      if [ "$curl_status" = 0 ]; then
        took=$(echo $line | cut -d';' -f1 | cut -c -4)
        code=$(echo $line | cut -d';' -f2)
      else
        took=$(($SECONDS - $now_seconds))
        code=-1
      fi

      if [ "$shutdown" = "no" ]; then
        printf "%s\t%s\t%s\t%s\n" "$now" "$took" "$code" "$worker" | tee -a "$csv"
      fi
    done
  ) &
done

wait $(jobs -p)
